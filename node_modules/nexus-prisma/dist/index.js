"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var nexus_1 = require("nexus");
var builder_1 = require("./builder");
__export(require("./definitions"));
function validateOptions(options) {
    if (!options.prisma) {
        throw new Error('Missing `prisma` property in `makePrismaSchema({ prisma: { ... } })`');
    }
    if (!options.prisma.datamodelInfo) {
        throw new Error('Missing `prisma.datamodelInfo` property in `makePrismaSchema({ prisma: { datamodelInfo: ... } })`');
    }
    if (!options.prisma.datamodelInfo.uniqueFieldsByModel ||
        !options.prisma.datamodelInfo.clientPath ||
        !options.prisma.datamodelInfo.schema) {
        throw new Error('Invalid `prisma.datamodelInfo` property. This should be imported from the `nexus-prisma-generate` output directory');
    }
    if (!options.prisma.client) {
        throw new Error('Missing `prisma.client` property in `makePrismaSchema({ prisma: { client: ... } })`');
    }
    if (typeof options.prisma.client !== 'function' &&
        (!options.prisma.client.$exists || !options.prisma.client.$graphql)) {
        throw new Error("Invalid `prisma.client` property in `makePrismaSchema({ prisma: { client: ... } })`.\nThis should either be an instance of the generated prisma-client, or a function that returns the prisma-client instance from your GraphQL server context\n");
    }
}
function makePrismaSchema(options) {
    validateOptions(options);
    var builder = new builder_1.PrismaSchemaBuilder(options);
    if (!options.types) {
        options.types = [];
    }
    var schema = nexus_1.core.makeSchemaInternal(options, builder).schema;
    // Only in development envs do we want to worry about regenerating the
    // schema definition and/or generated types.
    var _a = options.shouldGenerateArtifacts, shouldGenerateArtifacts = _a === void 0 ? Boolean(!process.env.NODE_ENV || process.env.NODE_ENV === 'development') : _a;
    if (shouldGenerateArtifacts) {
        // Generating in the next tick allows us to use the schema
        // in the optional thunk for the typegen config
        new nexus_1.core.TypegenMetadata(options).generateArtifacts(schema).catch(function (e) {
            console.error(e);
        });
    }
    return schema;
}
exports.makePrismaSchema = makePrismaSchema;
//# sourceMappingURL=index.js.map